// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract RaizDex is ERC20, AccessControl, Pausable {
    using SafeMath for uint256;


    bytes32 public constant BURNER_ROLE = keccak256("BURNER_ROLE");

    uint256 private constant DECIMALS = 18;
    uint256 private constant TOTAL_SUPPLY = 90000000 * (10**DECIMALS);
    uint256 private constant MINIMUM_SUPPLY = TOTAL_SUPPLY / 2;

    address private constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;

    address private rewardWallet;
    uint256 private burnFeePercentage = 1;
    uint256 private rewardFeePercentage = 1;
    mapping(address => bool) private blacklist;
    mapping(address => bool) private excludedFromFees;
    mapping(address => uint256) private maxTransactionAmount;
    mapping(address => uint256) private maxWalletHolding;

    modifier onlyAdmin() {
        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "CANAMOToken: Caller is not an admin");
        _;
    }

    constructor(
        address _rewardWallet,
        uint256 _maxTransactionPercentage,
        uint256 _maxWalletHoldingPercentage
    ) ERC20("RaizDex", "Raix") {
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(BURNER_ROLE, msg.sender);
        rewardWallet = _rewardWallet;
        _mint(msg.sender, TOTAL_SUPPLY);
        setMaxTransactionPercentage(_maxTransactionPercentage);
        setMaxWalletHoldingPercentage(_maxWalletHoldingPercentage);
    }

    function transfer(address recipient, uint256 amount) public override whenNotPaused returns (bool) {
        require(!blacklist[msg.sender], "CANAMOToken: Sender is blacklisted");
        require(!blacklist[recipient], "CANAMOToken: Recipient is blacklisted");
        require(amount <= maxTransactionAmount[msg.sender], "CANAMOToken: Exceeds maximum transaction amount");

        uint256 burnFeeAmount = calculateFee(amount, burnFeePercentage);
        uint256 rewardFeeAmount = calculateFee(amount, rewardFeePercentage);
        uint256 transferAmount = amount.sub(burnFeeAmount).sub(rewardFeeAmount);

        if (!excludedFromFees[msg.sender] && !excludedFromFees[recipient]) {
            _burn(msg.sender, burnFeeAmount);
            _transfer(msg.sender, rewardWallet, rewardFeeAmount);
        }

        _transfer(msg.sender, recipient, transferAmount);

        if (totalSupply() <= MINIMUM_SUPPLY) {
            // Set all transfer fees to 0 when minimum supply is reached
            burnFeePercentage = 0;
            rewardFeePercentage = 0;
        }

        return true;
    }

    function calculateFee(uint256 amount, uint256 feePercentage) private pure returns (uint256) {
        return amount.mul(feePercentage).div(100);
    }

    function setBurnFeePercentage(uint256 _burnFeePercentage) public onlyAdmin {
        require(_burnFeePercentage <= 5, "CANAMOToken: Burn fee percentage exceeds maximum");
        burnFeePercentage = _burnFeePercentage;
    }

    function setRewardFeePercentage(uint256 _rewardFeePercentage) public onlyAdmin {
        require(_rewardFeePercentage <= 5, "CANAMOToken: Reward fee percentage exceeds maximum");
        rewardFeePercentage = _rewardFeePercentage;
    }

    function excludeFromFees(address account) public onlyAdmin {
        excludedFromFees[account] = true;
    }

    function includeInFees(address account) public onlyAdmin {
        excludedFromFees[account] = false;
    }

    function addToBlacklist(address account) public onlyAdmin {
        blacklist[account] = true;
    }

    function removeFromBlacklist(address account) public onlyAdmin {
        blacklist[account] = false;
    }

    function setMaxTransactionPercentage(uint256 _maxTransactionPercentage) public onlyAdmin {
        require(
            _maxTransactionPercentage <= 10,
            "CANAMOToken: Max transaction percentage exceeds maximum"
        );
        maxTransactionAmount[msg.sender] = TOTAL_SUPPLY.mul(_maxTransactionPercentage).div(100);
    }

    function setMaxWalletHoldingPercentage(uint256 _maxWalletHoldingPercentage) public onlyAdmin {
        require(
            _maxWalletHoldingPercentage <= 25,
            "CANAMOToken: Max wallet holding percentage exceeds maximum"
        );
        maxWalletHolding[msg.sender] = TOTAL_SUPPLY.mul(_maxWalletHoldingPercentage).div(100);
    }
}
